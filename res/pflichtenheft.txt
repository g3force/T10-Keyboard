Einleitung

Die UseAcc möchte ein Programm erstellen, dass in Kombination mit einer Bildschirmtastatur automatische priorisierte Wort-Vorschläge anbietet.

Das Hauptaugenmerk dieser “T10 Bildschirmtastatur” liegt in der Autovervollständigung. Diese soll eine möglichst hohe Tipp-Geschwindigkeit inkl. Lerneffekt bereitstellen. Deshalb wird die Tastatur nicht versuchen, möglichst viele Wörter vorzuschlagen, sondern nur das Wahrscheinlichste. Aus Erfahrungsberichten von Kunden wurde dies als die effektivste Methode zum schnellen Tippen erkannt.

Zum Produktumfang gehört selbstverständlich auch eine On-Screen Tastatur. Dabei behält die UseAcc sich jedoch vor, eine bereits vorhandene Tastatur mitzuliefern, um das Hauptaugenmerk auf die Kernkompetenzen des Produktes zu konzentrieren. In diesem Fall arbeitet das Produkt als Daemon im Hintergrund. Alle Tastatureingaben der Bildschirmtastatur, sowie einer physikalischen Tastatur, werden aufgenommen und verarbeitet. Sollte die Entscheidung auf eine eigene Tastatur-Lösung fallen, so wird diese mit einem dynamischen Tastaturlayout ausgeliefert. Zudem wird anhand von Referenzprodukten eine optimale Arbeitsumgebung aufgebaut. Beispielsweise sollten die Tasten zwischen Links- und Rechtsklick unterscheiden können, um so zwei Funktionen pro Taste bereitstellen zu können.


Ziele
Vervollständigungen akzeptieren
[UC4010]  Der Anwender akzeptiert Vervollständigung.
[UC4011] Nach Vervollständigung eines Wortes (nach entsprechenden Terminierungszeichen) zeigt das Programm einen Bestätigungsdialog, welcher das eingetippte Wort - je nach Auswahl der Leertaste -  in das Priorisierungswörterbuch hinzufügen lässt oder nicht.
Wörterbuch & Priorisierungsprofil auswählen
[UC4020] Der Benutzer wählt Priorisierungsprofil und dessen Wörterbuch aus.
[UC4021] Nach Auswahl des entsprechenden Profils und dessen Wörterbuch, ist es dem User möglich die in dem Profil festgehaltene Priorisierung anzuwenden und weiter zu spezifizieren. Zusätzlich dazu können die vorher selbst angelegten Wörter inklusive ihrer Priorisierung angesehen und - vom Programmadministrator - gegebenenfalls editiert werden.
Tastaturlayout anpassen
[UC4030] Der Programmadmin passt das Tastaturlayout an.
[UC4031] So ist es ihm möglich, das Tastaturlayout entsprechend den Wünschen des Anwenders und Rahmenbedingungen des Programms zu ändern.
Wörterbücher importieren / exportieren
[UC4040] Das Wörterbuch wird vom Administrator des Programms importiert / exportiert.
[UC4041] Wörterbücher mit entsprechend passenden Formatierungen können ins Programm importiert, sowie die bereits genutzten Wörterbücher exportiert werden..
Wörterbücher bereinigen
[UC4050] Der Programmadmin startet Autobereinigung des Wörterbuch.
[UC4051] Dies kann in Form einer kompletten Bereinigung des Wörterbuchs stattfinden oder durch Nutzung bestimmter Kriterien, um Wörter, die diese erfüllen, vom Wörterbuch zu löschen.



Einsatzbereich

Die Bildschirmtastatur gehört zu dem Bereich der Usability-Werkzeuge. Diese Werkzeuge sollen Menschen mit körperlichen Einschränkungen die Bedienung von technischen Geräten vereinfachen. Die Bildschirmtastatur soll auf PCs und Laptops verwendet werden. Über eine angeschlossene Maus ist die Bedienung dieser Tastatur möglich. Eingesetzt werden soll die Bildschirmtastatur in dem Bereich der Textverarbeitung, wie zum Beispiel dem Schreiben eines Textes in einem Texteditor, chatten, aber auch dem Schreiben von Programmcode.

Als primäre Zielgruppe sind Menschen vorgesehen, denen die Bedienung einer Tastatur als Eingabegerät sehr schwer fällt oder nicht möglich ist.
Umgebung
Die Bildschirmtastatur inkl. dem T10 System wird für verschiedene Systeme entwickelt. Im folgenden werden die Hard- und Software Rahmenbedingungen aufgelistet.
Hardware

    x86 / x64 PCs
    über externe Maus (min 2 Tasten: rechts und links) bedienbar
    max. 300 MB Speicherplatz für Programm zzgl. Speicherplatz für Wörterbücher und Profile

Software

    ab Java 1.6 Plattform
        openJDK und Oracle Java
    Betriebssystem
        Windows XP (Home Edition)
        Windows 7 (Home Premium)
        Ubuntu 10.04 bis 11.04



Funktionen
Alltagsgebrauch
Nummer	Beschreibung	Aufwand (1-10 groß)
F0010
F0011



F0012	Tastatur

    das Programm beinhaltet eine voll funktionsfähige Bildschirmtastatur, welche durch eine Maus bedienbar ist und als Eingabegerät für jede Anwendung genutzt werden kann
    zum Schreiben von Großbuchstaben wird ein Buchstabe mit der rechten Maustaste angeklickt

	5
F0020	Priorisierung
Abspeicherung einer Priorisierung (Anzahl der Verwendungen) für jedes getippte Wort; Um so häufiger ein Wort eingegeben wird, desto höher wird es priorisiert 	9
F0030	Profile
Priorisierung in verschiedenen, auswählbaren Profilen speichern;
Jedes Profil verwendet ein eigenes Priorisierungswörterbuch	7
F0040



(F0041)
(F0042)
F0043	kontextbezogene Profilauswahl
Welches Profil verwendet werden soll, kann sowohl manuell ausgewählt werden, als auch durch den Kontext automatisch erkannt werden; Kriterien für den Kontext:

    aktives Fenster

    die letzten 4 Wörter
    manuelles Umschalten direkt in der Oberfläche

	



7
7
2
F0050	Wortvorschlag
Beim Tippen wird ein Vorschlag direkt im momentan aktiven Fenster auf Basis des ausgewählten Priorisierungsprofil angezeigt; dabei werden die bereits getippten Buchstaben als Basis des zu suchenden Wortes genommen; dabei soll immer nur ein Vorschlag angezeigt werden, da das Lesen von mehreren Vorschlägen zu viel Zeit in Anspruch nimmt und nicht gewünscht ist 	4
F0060
(F0061)



F0062

F0063
F0064	Sprachwörterbücher einbinden und exportieren

    freie Wörterbücher aus dem Internet sollen einbindbar sein, hierfür wird ein weit verbreitetes Format verwendet und vorgegeben; so sind Sprachen (mindestens Deutsch und Englisch) inklusive einer Priorisierung einbindbar
    selbst erstellte Profile können inklusive Wörterbuch und Priorisierung in eine extra Datei exportiert werden;
    exportierte Profile können eingebunden werden
    exportierte Profile können manuell angepasst werden

	
3



3

6
1
F0070
F0071
F0072	Mute-Buttons

    die Autovervollständigung ist aus- / einschaltbar
    die Speicherung ist aus- / einschaltbar (z.B. bei Passworteingabe)

	
1
1
(F0080)


(F0081)




(F0082)	Wörterbuchbereinigung
Eine manuelle Bereinigung des Wörterbuches zum Löschen von Tippfehlern ist möglich

    Automatisch Löschen: Alle Wörter, die seltener getippt wurden als ein selbst definierbarer Priorisierungswert (Anzahl wie oft ein Wort getippt wurde) bzw. seit einem langem Zeitraum nicht mehr getippt wurden, werden gelöscht
    Wörterbücher der Profile sind anschaubar und editierbar

	6





8
F0090
F0091

(F0092)
	Satzzeichen

    mit Bestätigung der Autovervollständigung wird ein Leerzeichen hinzugefügt
    wird ein Satzzeichen nach einer Bestätigung getippt, wird das vorhergehende Leerzeichen durch das Satzzeichen ersetzt

	4
4

5




Schnittstellen
Das T10 System bietet zwei Schnittstellen, um Wörterbücher und Profile zu importieren und eine Schnittstelle um Profile zu exportieren.
Profilformat - Mock-Up
Wort	Häufigkeit	Timestamp
schreiben	10	781308042
Haus	21	786307045
Test	42	1337314142
ich	1337	781308042

Import
Es können freie Wörterbücher, die aus fremden Quellen bezogen werden, importiert und in das Profilformat überführt werden.
Es können Profil-Formatdateien importiert werden und so ein neues Profil angelegt werden.
Export
Profile können nach dem im Mock-Up gezeigten Schema exportiert werden.


Leistungsmerkmale
Die folgenden nicht-funktionalen Leistungsmerkmale werden geboten.
   
Nummer	Beschreibung	Aufwand (1-10 groß)
NF1010	Klick-Ersparnis gegenüber Nutzung der Bildschirmtastatur ohne das Produkt	5
NF1015	Besonderer Fokus auf Zuverlässigkeit

    Behandlung von Exceptions

	7
NF1020	Look and Feel von Textverarbeitungsprodukten

    auf Eingaben wird in einer ähnlichen Geschwindigkeit reagiert wie auf Eingaben einer physikalischen Tastatur in Textverarbeitungsprodukten

	7
NF1030	Intuitive Bedienung

    Benutzer können sofort loslegen ohne lange Einrichtung
    Wichtige Steuerelemente sind gut zu erreichen

	6
NF1040	Geringer Speicherverbrauch	2



Benutzeroberfläche
Anforderungen
Nummer	Beschreibung	Aufwand (1-10 groß)
(UI2010)	Tasten des Tastaturlayouts sind verschiebbar

    Position wird gespeichert und beim Start neu geladen

	

8
(UI2020)	Bildschirmtastatur befindet sich in einem eigenen Fenster, welches in der Größe anpassbar ist. Die Tasten werden dabei skalar mitverändert. 	

9
UI2030	Menü hat max. 2 Ebenen

    Alle Befehle zur Administration und Nutzung des Programms sind mit max. 2 Klicks zu erreichen

	

3
UI2040	Profil- / Kontextwahl manuell auf der Oberfläche möglich	

4
(UI2050)	2 Leertasten

    Taste 1 um einen Wortvorschlag zu akzeptieren und ein Leerzeichen zu schreiben
    Taste 2 um einen Wortvorschlag zu verwerfen und ein Leerzeichen zu schreiben

	

5
UI2060	farbliche Darstellung von aktiven Features mit rot (aus) und grün (an)	

1
UI2070	es werden keine Pop-Up-Menüs verwendet	

1
UI2080	es ist keine Mausaktion außerhalb des Tastaturbereiches nötig	

1
(UI2090)	die letzten 3 getippten Wörter werden direkt auf der Tastatur in einer Liste angezeigt und können so wieder gelöscht werden	

4



Mock-Up
Die folgende Grafik zeigt ein erstes Mock-Up der Bildschirmtastatur, das das geplante Layout darstellt. Das eigentliche Tastaturlayout orientiert sich am klassischen QWERTZ-Layout (deutsches Tastaturlayout).

HOCHKANT!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Qualitätsziele
Folgende Tabellen legen dar, auf welche Qualitätsanforderungen besonderer Wert gelegt wird.
Dabei werden die einzelnen Punkte zunächst erläutert und anschließend gewichtet.
Erläuterung der Qualitätsanforderungen
Qualitätsanforderung	Beschreibung
Stabilität	Die Stabilität einer Software beschreibt, wie selten das Programm abstürzt.
Benutzerfreundlichkeit	Der Benutzer sollte möglichst leicht mit der Oberfläche arbeiten können und diese auch persönlich seinen Bedürfnissen anpassen können.
Portierbarkeit	Die Portierbarkeit einer Software sagt aus, dass ohne Installation eine sofortige Ausführung und Benutzung der Software möglich ist.
Kompatibilität	Die Kompatibilität einer Software beschreibt, inwiefern sie auf verschiedenen System läuft.
Zertifizierung nach dem Standard “FIT 890621”	Der Standard “FIT 890621” steht für eine besonders hohe Qualität. Das Zertifikat wird durch die FIT Ich-AG verifiziert.

Gewichtung der Qualitätsanforderungen
Qualitätsanforderungen	sehr wichtig	wichtig	weniger wichtig	unwichtig
Stabilität		

X
		
Benutzerfreundlichkeit	

X
			
Portierbarkeit			

X
	
Kompatibilität			

X
	
“FIT 890621”	

X
			




Testszenarien
Um eine Erfüllung der Anforderungen zu überprüfen, wird eine gewisse Anzahl von Tests durchgeführt. Diese können wie folgt aussehen.
Eingabe von Buchstaben-Verkettungen
Hier kann überprüft werden, ob die Eingabe der jeweiligen Buchstaben ohne Fehler miteinander verkettet und in das richtige Fenster geschrieben wird.
Überprüfung des Priorisierungswörterbuchs
Bei dieser Überprüfung wird festgestellt, ob die Algorithmen zur entsprechenden Priorisierung des eigens angelegten Wörterbuches konform mit den gewollten Resultaten sind.
Außerdem kann gleichzeitig geschaut werden, ob eine Sicherung der selbst angelegten Wörter im Wörterbuch durch das Programm durchgeführt wurde.
Stabilitätstests
Um eine möglichst hohe Stabilität und Geschwindigkeit zu gewährleisten, kann hier durch schnelle Eingabe von verschiedenen Zeichen überprüft werden, ob eine kontinuierliche Abarbeitung der gesendeten Informationen stattfindet und trotzdem die Stabilität möglichst unbeeinträchtigt bleibt.
Portierbarkeitstests
Obwohl wir die betriebssystemsunabhängige Programmiersprache Java benutzen, könnte es durchaus sein, dass es aus Gründen von älteren Systemen zu Kompatibilitätsproblemen kommt. Um hier eine verbesserte Zuverlässigkeit zu geben, könnte man die Software auf älteren Umgebungen installieren und auf “Herz und Nieren” testen.




Ergänzungen
Lizenzen
Es werden zur Entwicklung und zum Betrieb Softwareprodukte verwendet die unter einer freien (Open-Source) Lizenz stehen.
3rd Party Komponenten

    Standardbibliotheken für die Programmiersprache Java
    Bibliothek für die Erstellung von GUIs (wahrscheinlich Swing)
    Es wird möglicherweise eine externe Bildschirmtastatur verwendet die unter kostenloser Lizenz steht. 


Glossar
Daemon
Hintergrundprogramm, dass Funktionalitäten ohne aktives Fenster bereitgestellt. Zur Steuerung dient ein Symbol im Systemtray oder einem Panel. Ein Hilfsfenster ist aber auch möglich.
Open-Source
Software, deren Quelltext frei verfügbar und veränderbar ist. Die Nutzung ist in der Regel kostenfrei.
















T10 – Die intelligente Bildschirmtastatur




Version
Editor
Description
0.7
Felix Pistorius, Daniel Andres
Nicolai Ommer, Sebastian Nickel, Dirk Klostermann
Creation of the first version
0.8
Dirk Klostermann
Merging in Symphony












Projektbeteiligte:
Felix Pistorius
Daniel Andres
Nicolai Ommer
Sebastian Nickel
Dirk Klostermann







Inhaltsverzeichnis
		1. Einführung	3
1.1. Aufgabenstellung	3
1.2. Qualitätsziele	3
1.3. Stakeholder	3
		2. Randbedingungen	4
2.1. Technische Randbedingungen	4
2.1.1. Verwendene Software	4
2.1.2. Hardware Anforderungen	4
2.1.3. Randbedingen der GUI	4
2.1.4. Schnittstellen zum Betriebssystem	4
2.2. Organisatorische Randbedingungen	4
2.3. Konventionen	5
		3. Löungsstrategie	5
3.1. Ideen	5
3.1.1. Tastaturarten	6
3.1.2. Struktur des Wörterbuchs	6
3.2. Strategieentscheidung	7
		4. Sichten auf das Projekt	7
4.1. Logische Struktur	7
4.1.1. Komponenten	7
4.1.2. Module → Felix	8
4.1.3. grobes Klassendiagramm	8
4.2. Teilsysteme → Basti	8
4.3. Datenfluss	8
4.4. Kontrollfluss	8
		5. Datentypen	8
5.1. Struktur des Trees	8
5.2. Dateiformat → Felix	9
		6. Architekturrisiken	9
		7. Externe Bibliotheken	10

Einführung
Aufgabenstellung
Das T10-Bildschirmtastatur-Projekt entwickelt eine Bildschirmtastatur inklusive einer priorisierten Wortvervollständigung.
Dabei wird es möglich sein, verschiedene Profile mit unterschiedlichen Wörterbüchern zu nutzen, diese zu importieren und zu exportieren. Außerdem lernt das Wörterbuch ständig durch Häufigkeitsanalysen hinzu. Die expliziten Anforderungen sind im Dokument Lieferant_UseAcc_T10_Pflichtenheft_v1.0.pdf in der zentralen Dokumentenverwaltung zu finden.

Qualitätsziele
In Bezug auf das Pflichtenheft sind folgende Qualitätsziele mit absteigender Priorität zu erfüllen.

Name
Beschreibung
Stakeholder
FIT 890621
Standard für hohe Qualität
UseAcc
Benutzerfreundlichkeit
intuitive Arbeit und Anpassbarkeit
UseAcc, Kunde, Benutzer
Stabilität
wenig Systemabstürze
Kunde, Benutzer
Portierbarkeit
keine Installation zum Betrieb notwendig
Kunde, Benutzer
Kompabilität
auf verschiedenen Systemen einsetzbar
Kunde, Benutzer



Stakeholder

Rollenname
Person(en) - Ansprechpartner
Kenntnisse
UseAcc - Entwickler
Nicolai Ommer, Dirk Klostermann, Felix Pistorius, Sebastian Nickel, Daniel Andres
Anforderungen, Architektur
Benutzer
Ulrich Ahrendt
Anforderungen
Dozent
Herr Kruse
Wissen
Kunde auXilio
Boris Beck, Ulrich Ahrendt
Anforderungen





Randbedingungen 
Technische Randbedingungen
Verwendene Software
Programmiersprache: Java
JVM und JDK: OpenJDK 1.6 und höher
Standardbibliotheken
Bibliothek für GUIs
Betriebssysteme, die unterstützt werden müssen:
Windows XP (Home Edition)
Windows 7 (Home Edition)
Ubuntu 10.04 - 11.04
Hardware Anforderungen 
x86 / x64 Computer
über externe Maus bedienbar mit min. 2 Tasten
max 300 MB für das Programm ohne Daten
Bildschirm muss vorhanden sein
Linux: eine grafische Oberfläche (Gnome)
Randbedingen der GUI
Nummer
Beschreibung
UI2030
Menü hat max. 2 Ebenen
Alle Befehle zur Administration und Nutzung des Programms sind mit max. 2 Klicks zu erreichen
UI2040
Profil- / Kontextwahl manuell auf der Oberfläche möglich
UI2060
farbliche Darstellung von aktiven Features mit rot (aus) und grün (an)
UI2070
es werden keine Pop-Up-Menüs verwendet
UI2080
es ist keine Mausaktion außerhalb des Tastaturbereiches nötig

Schnittstellen zum Betriebssystem
Die Bildschirmtastatur muss eine Schnittstelle zum Standard-Input des Systems beinhalten, um die getippten Buchstaben in andere Anwendungen umzuleiten.
Dies wird mit dem Senden von Keycodes realisiert.

Organisatorische Randbedingungen
Organisation und Struktur
Projektteam
Entscheidungen: gemeinschaftlich, bei Unstimmigkeit Projektleiter oder Dozent
Eigenentwicklung zu einem Produkt
Ressourcen (Budget, Zeit, Personal)
Preis: 30.000€ für Muss-Klauseln
für optionale Anforderungen Bezahlung auf Stundenbasis mit 100€ / h
Projektbudget (fest)
Zeitplanung: fest (siehe Kalender)
Abgabe: 17.11.2011
Termin gesetzt durch Dozent
Priorität: Zeit (nicht zusätzlicher Funktionsumfang)
Team
Nicolai Ommer, Java Specialist, Verfügbarkeit 24/5
Dirk Klostermann, Java Specialist, Verfügbarkeit 24/5
Sebastian Nickel, Java Specialist, Verfügbarkeit 24/5
Felix Pistorius, Java Specialist, Verfügbarkeit 24/5
Daniel Andres, Java Specialist, Verfügbarkeit 24/5

Organisatorische Standards
entwickelt wird nach dem Standard FIT 890621
Entwicklungsumgebung: Eclipse Helios oder Indigo
Versionsverwaltung: Git über code.google.com mit EGit Plugin für Eclipse
UML Zeichen Tool: Dia
Zeittracking: Projekttagebuch

Konventionen
Versionsmanagement
Commits müssen kommentiert werden
keine Commits mit Fehlern im Code
Code muss kompilierbar sein, Warnings sind zu vermeiden
Programmierrichtlinien
Formatlayout vorgegeben → dieses nutzen
Dokumentationsrichtlinien
Layout (inkl. Javadoc) vorgegeben → nutzen
Code
Layout (inkl. Javadoc) vorgegeben → nutzen
Dokumente
Template nutzen

Löungsstrategie 
Ideen
Um die Anforderung einer intelligenten Bildschirmtastatur zu erfüllen, wurden einige Lösungsstrategien erarbeitet. Hierbei soll sich vorallem auf die Art der Wortvervollständigung konzentriert werden.
Tastaturarten
Die erste Frage war die Art der Tastatur. Auf der einen Seite kann man eine eigene Tastatur programmieren, auf der anderen Seite eine Tastatur eines Drittanbieters verwenden und nur einen sogenannten Deamon programmieren, welcher im Hintergrund läuft und die Wortvervollständigungen übernimmt. Der Kunde benötigt eine Tastatur im Funktionsumfang (F0011), es ist allerdings die Möglichkeit offen gehalten worden, diese Tastatur von einem Drittanbieter zu beziehen, so lange diese im Programm mitgeliefert wird. Die selbst programmierte und die Drittanbierter Tastatur haben verschiedene Vor- und Nachteile.


Eigene Tastatur
Drittanbieter-Tastatur
Vorteile
1.Anpassbarkeit (eigener Accept-Button)
2.flexibles Design (optinale Anforderung der verschiebbaren Tasten (UI2010) nachrüstbar
1.Weniger Programmieraufwand → Zeitersparnis
2.Tastatur unabhängig vom Daemon → Tastatur austauschbar
Nachteile
1.Erhöhte Fehleranfälligkeit
2.Mehraufwand
1.Mögliche Lizenzkosten
2.kein Zugriff auf Source Code

Struktur des Wörterbuchs
Eine Wortvervollständigung kann man auf der Basis verschiedener Kriterien durchführen. Zum Beispiel könnte man anhand der Semantik der vorhergenden Wörter die Endung des gerade getippten Wortes erraten. Dieses Projekt möchte sich jediglich mit einer Häufigkeitsanalyse befassen. Das bedeutet, um so häufiger ein Wort getippt wurde, desto eher wird es vorgeschlagen. Hierzu muss abgespeichert werden, wie häufig ein Wort getippt wird.

Es gibt mehrere Ansätze, wie man die Häufigkeiten abspeichern könnte:
Liste mit direkt dahinter der Häufigkeit
Vorteile
leicht zu exportieren
außerhalb des Programms editierbar
Nachteile
unperformant zur Laufzeit
→ nur als Format zur Speicherung des Wörterbuchs während das Programm nicht läuft geeignet
Baumstruktur
Vorteile
einfügen, suchen sehr schnell
geringer Speicherplatz
Nacheile
nicht direkt exportierbar, Exportierfunktion nötig
Datenbank
eine Tabelle für jedes Wörterbuch
jede Tabelle enthält Wörter und Häufigkeiten
Vorteile
schneller Zugriff
Nachteile
keine Hierarchie
Datenbeank benötigt 
Strategieentscheidung
Bei der Tastatur wurde sich für eine eigene Tastatur entschieden. Keine vorhandene Opensource Tastatur war verfügbar. Besonders die Anforderung (UI2040), dass die Profilauswahl und die Buttons für die Priorisierung bzw. Autovervollständigung direkt auf der Tastatur eingefügt sein müssen, ist mit einer Drittanbieter-Tastatur kaum möglich. Deshalb wird nun eine eigene Tastatur implementiert und bei der Implementierung schon darauf wewrt gelegt, dass man sie so erweitern könnte, dass der Benutzer das Layout der Tastatur selbst verändern kann.
Für die Struktur eines Wörterbuchs wird eine Baumstruktur verwendet. Innerhalb einer Exportfunktion, sollte dieser Baum in eine Struktur überführt werden, welche einer Liste entspricht, die außerhalb des Programms editierbar und wieder einbindbar ist.
	
Sichten auf das Projekt
Logische Struktur
Komponenten
Die Komponenten werden nach dem MVC Model (Model, View, Controller) aufgeteilt, um eine sinnvolle Unterteilung zu gewährleisten. Im folgenden Diagramm sieht man, welche Aufgaben in den drei Komponenten übernommen werden müssen.

Module → Felix
Mindmap der Module
Hierarchie der Module
grobes Klassendiagramm
Teilsysteme → Basti
	Package
Datenfluss
	Aktivitätsdiagramm → Dirk
Kontrollfluss

Datentypen
Struktur des Trees
Die Struktur des PriorityTrees soll wie folgt aufgebaut werden. Die Knoten beinhalten immer nur einen Buchstaben, ein Wort ergibt sich erst wenn alle Buchstaben auf dem Weg von dem root Knoten zu einem bestimmten Knoten liest. Jeder Knoten beinhaltet, welchen Buchstaben er repräsentiert (word), von welchem Knoten er ein Folgeknoten ist (father), welches Wort vorgeschlagen werden soll, wenn die Buchstabenfolge von root bis zu diesem Knoten eingegeben wurde (suggest), wie oft diese Buchstabenfolge schon eingegeben wurde (frequency) und wer die Folgeknoten dieses Knoten sind (followers). „suggest“ wird bei dem Einfügen eines Knoten zuerst auf den Knoten selbst gesetzt. Er schlägt sich also selber vor. Wird bei einem Knoten die Häufigkeit (frequency) erhöht, so werden alle übergeordneten Knoten überprüft, ob die frequency dieses Knoten höher ist als die frequency des suggest Knoten des übergeordneten Knoten ist. Wenn dies der Fall ist, wird der suggest durch den unteren Knoten ersetzt.

Dateiformat → Felix
Architekturrisiken
1.Die Kommunikation zwischen Betriebssystem und Tastatur funktioniert nicht wie gewünscht.
a.Es kann nicht zuverlässig auf die Tastatureingabe reagiert werden
b.Die Ausgabe in ein externes Fenster ist nicht möglich → F0050
2.Das MVC Modell erschwert die Implementierung, weil
a.stark abstrahiert werden muss
b.sich Code nicht eindeutig einordnen lässt
c.sich Entwickler über das Modell hinwegsetzen
3.Die Speicherstruktur des Wörterbuches und der Prioritäten ist nicht effizient genug, um flüssige Reaktionen zu gewehrleisten. → NF1020 
4.Die Plattformunabhängigkeit lässt sich auf Grund von zu starker Abweichungen nicht oder nur mit sehr hohem Aufwand realisieren. → Umgebungsanforderung

Externe Bibliotheken
1.Swing (Java GUI widget toolkit) von Oracles Java Foundation Classes (JFC)
a.Stellt ein umfangreiches Toolkit für die Erstellung der GUI zur Verfügung
2.log4j von der Apache Software Foundation, Apache License 2.0
a.log4j ist ein Logging-Tool, das viele Funktionen für das loggen innerhalb des Projektes anbietet
3.Robot (java.awt.Robot)
a.http://www.elitepvpers.com/forum/epvp-coders-tutorials/358215-java-die-robot-class.html  Kapitel 4.2
b.Tastatur Signale senden

