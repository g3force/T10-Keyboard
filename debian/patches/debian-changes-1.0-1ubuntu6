Description: Upstream changes introduced in version 1.0-1ubuntu6
 This patch has been created by dpkg-source during the package build.
 Here's the last changelog entry, hopefully it gives details on why
 those changes were made:
 .
 t10-keyboard (1.0-1ubuntu6) lucid maverick natty oneiric; urgency=low
 .
   * added support for old profile-file versions
 .
 The person named in the Author field signed this changelog entry.
Author: Nicolai Ommer <nicolai.ommer@gmail.com>

---
The information above should follow the Patch Tagging Guidelines, please
checkout http://dep.debian.net/deps/dep3/ to learn about the format. Here
are templates for supplementary fields that you might want to add:

Origin: <vendor|upstream|other>, <url of original patch>
Bug: <url in upstream bugtracker>
Bug-Debian: http://bugs.debian.org/<bugnumber>
Bug-Ubuntu: https://launchpad.net/bugs/<bugnumber>
Forwarded: <no|not-needed|url proving that it has been forwarded>
Reviewed-By: <name and email of someone who approved the patch>
Last-Update: <YYYY-MM-DD>

--- t10-keyboard-1.0.orig/src/edu/dhbw/t10/SuperFelix.java
+++ t10-keyboard-1.0/src/edu/dhbw/t10/SuperFelix.java
@@ -40,7 +40,8 @@ public class SuperFelix {
 	 * automatic: git shortlog | grep -E '^[ ]+\w+' | wc -l
 	 */
 	public static final String		VERSION	= "1.0";
-	public static final String		REV 		= "639";
+	public static final String		REV		= "639";
+
 
 	// --------------------------------------------------------------------------
 	// --- constructors ---------------------------------------------------------
--- t10-keyboard-1.0.orig/src/edu/dhbw/t10/manager/Controller.java
+++ t10-keyboard-1.0/src/edu/dhbw/t10/manager/Controller.java
@@ -37,7 +37,7 @@ import edu.dhbw.t10.type.keyboard.key.Bu
 import edu.dhbw.t10.type.keyboard.key.Key;
 import edu.dhbw.t10.type.keyboard.key.ModeButton;
 import edu.dhbw.t10.type.keyboard.key.MuteButton;
-import edu.dhbw.t10.type.profile.Profile;
+import edu.dhbw.t10.type.profile.Profile_V2;
 import edu.dhbw.t10.type.tree.PriorityTree;
 import edu.dhbw.t10.view.Presenter;
 import edu.dhbw.t10.view.dialogs.InputDlg;
@@ -95,8 +95,8 @@ public class Controller implements Actio
 		showStatusMessage("Keyboard initializing...");
 		
 		// load Managers
-		outputMan = new OutputManager();
 		profileMan = new ProfileManager(mainPanel);
+		outputMan = new OutputManager();
 		
 		// now, the Controller should be ready!
 		// hereafter, you should call methods, that need the controllers ActionEvents!
@@ -169,7 +169,7 @@ public class Controller implements Actio
 	 * @author SebastianN
 	 */
 	public void addNewProfile(String name) {
-		Profile profile = profileMan.createProfile(name);
+		Profile_V2 profile = profileMan.createProfile(name);
 		if (profile != null) {
 			profileMan.changeProfile(profile);
 		} else {
@@ -185,9 +185,9 @@ public class Controller implements Actio
 	 */
 	public void deleteActiveProfile() {
 		// get active profile to be delete
-		Profile todelete = profileMan.getActive();
+		Profile_V2 todelete = profileMan.getActive();
 		// get potential new profile
-		Profile newProfile = profileMan.getProfiles().get(0);
+		Profile_V2 newProfile = profileMan.getProfiles().get(0);
 
 		// after deleting profile, first or second profile should be made active
 		if (todelete == newProfile) {
@@ -438,7 +438,7 @@ public class Controller implements Actio
 	 */
 	private void eIsDropDownList(DropDownList currentDdl) {
 		if (currentDdl.getType() == DropDownList.PROFILE) {
-			Profile selectedProfile = profileMan.getProfileByName(currentDdl.getSelectedItem().toString());
+			Profile_V2 selectedProfile = profileMan.getProfileByName(currentDdl.getSelectedItem().toString());
 			if (selectedProfile != null) {
 				logger.debug("selected Profilename: " + selectedProfile.getName());
 				profileMan.changeProfile(selectedProfile);
--- t10-keyboard-1.0.orig/src/edu/dhbw/t10/manager/profile/ImportExportManager.java
+++ t10-keyboard-1.0/src/edu/dhbw/t10/manager/profile/ImportExportManager.java
@@ -31,7 +31,7 @@ import java.util.zip.ZipOutputStream;
 import org.apache.log4j.Logger;
 
 import edu.dhbw.t10.helper.StringHelper;
-import edu.dhbw.t10.type.profile.Profile;
+import edu.dhbw.t10.type.profile.Profile_V2;
 
 
 /**
@@ -228,7 +228,7 @@ public class ImportExportManager {
 	 * @throws IOException
 	 * @author DirkK
 	 */
-	public static void exportProfiles(Profile prof, File folder) throws IOException {
+	public static void exportProfiles(Profile_V2 prof, File folder) throws IOException {
 		logger.debug("Exporting profile " + folder.getName());
 		BufferedInputStream origin = null;
 		String zipFile = folder.toString();
@@ -267,7 +267,7 @@ public class ImportExportManager {
 	 * @throws IOException
 	 * @author DirkK
 	 */
-	public static void importProfiles(File zipFile, Profile prof) throws ZipException, IOException {
+	public static void importProfiles(File zipFile, Profile_V2 prof) throws ZipException, IOException {
 		logger.debug("Extracting zip file " + zipFile.toString());
 
 		// Reading the zip file
--- t10-keyboard-1.0.orig/src/edu/dhbw/t10/manager/profile/ProfileManager.java
+++ t10-keyboard-1.0/src/edu/dhbw/t10/manager/profile/ProfileManager.java
@@ -12,7 +12,6 @@ package edu.dhbw.t10.manager.profile;
 import java.awt.Dimension;
 import java.io.File;
 import java.io.FileInputStream;
-import java.io.FileOutputStream;
 import java.io.FilenameFilter;
 import java.io.IOException;
 import java.util.ArrayList;
@@ -24,11 +23,13 @@ import java.util.zip.ZipException;
 import org.apache.log4j.Logger;
 
 import edu.dhbw.t10.manager.Controller;
+import edu.dhbw.t10.type.Config;
 import edu.dhbw.t10.type.keyboard.DropDownList;
 import edu.dhbw.t10.type.keyboard.Image;
 import edu.dhbw.t10.type.keyboard.KeyboardLayout;
 import edu.dhbw.t10.type.keyboard.key.PhysicalButton;
 import edu.dhbw.t10.type.profile.Profile;
+import edu.dhbw.t10.type.profile.Profile_V2;
 import edu.dhbw.t10.view.panels.MainPanel;
 
 
@@ -43,10 +44,8 @@ public class ProfileManager {
 	// --------------------------------------------------------------------------
 	private static final Logger	logger					= Logger.getLogger(ProfileManager.class);
 	private String						datapath;
-	private String						configFile				= "t10keyboard.conf";
-	Properties							conf;
-	private ArrayList<Profile>		profiles					= new ArrayList<Profile>();
-	private Profile					activeProfile;
+	private ArrayList<Profile_V2>		profiles					= new ArrayList<Profile_V2>();
+	private Profile_V2					activeProfile;
 	private MainPanel					mainPanel;
 	private boolean					changeProfileBlocked	= false;
 	
@@ -84,7 +83,7 @@ public class ProfileManager {
 		}
 		
 		// reading the config file once, if properties not found, use default ones; updates itself
-		loadConfig();
+		Config.loadConfig(datapath);
 
 		// fill activeProfileName and profilePathes with the data from the config object
 		loadProfiles(); // deserializes all profiles, fills profiles
@@ -98,7 +97,7 @@ public class ProfileManager {
 		// set active profile by defauleActiveProfile which was either loaded from config file or is set to a default
 		// value
 		else {
-			activeProfile = getProfileByName(conf.getProperty("ActiveProfile"));
+			activeProfile = getProfileByName(Config.getConf().getProperty("ActiveProfile"));
 			if (activeProfile == null) {
 				activeProfile = profiles.get(0);
 			}
@@ -115,44 +114,6 @@ public class ProfileManager {
 	// --- methods --------------------------------------------------------------
 	// --------------------------------------------------------------------------
 	
-	// ------------conf-----------
-	/**
-	 * loads the config file, fills the conf property attribute
-	 * @author dirk
-	 */
-	private void loadConfig() {
-		conf = new Properties();
-		FileInputStream fis;
-		try {
-			// reading the config file
-			fis = new FileInputStream(datapath + "/" + configFile);
-			conf.load(fis);
-			logger.info("Config file read");
-		} catch (IOException err) {
-			logger.warn("Could not read the config file");
-			// config file not found, set the config values to default
-		}
-		if (!conf.containsKey("ActiveProfile"))
- {
-			logger.debug("ActiveProfile was not in the config file");
-			conf.setProperty("ActiveProfile", "default");
-		}
-		if (!conf.containsKey("PROFILE_PATH"))
-			conf.setProperty("PROFILE_PATH", "");
-	}
-	
-	
-	public void saveConfig() {
-		try {
-			conf.setProperty("ActiveProfile", activeProfile.getName());
-			FileOutputStream fos = new FileOutputStream(datapath + "/" + configFile);
-			conf.store(fos, "Stored by closing the program");
-			logger.debug("config file saved to" + datapath + "/" + configFile);
-		} catch (IOException err) {
-			logger.error("Could not store the properties at " + datapath + " / " + configFile);
-			err.printStackTrace();
-		}
-	}
 	
 	
 	// -------------------------profile---------------
@@ -164,13 +125,13 @@ public class ProfileManager {
 	 * @return Handle/Pointer to the new profile.
 	 * @author SebastianN, NicolaiO
 	 */
-	public Profile createProfile(String profileName) {
-		Profile newProfile = getProfileByName(profileName);
+	public Profile_V2 createProfile(String profileName) {
+		Profile_V2 newProfile = getProfileByName(profileName);
 		
 		if (newProfile != null) {
 			logger.warn("Profile already exists.");
 		} else {
-			newProfile = new Profile(profileName, datapath);
+			newProfile = new Profile_V2(profileName, datapath);
 			profiles.add(newProfile);
 		}
 		return newProfile;
@@ -185,7 +146,7 @@ public class ProfileManager {
 	 * @return If found, handle/reference to said profile. Otherwise NULL
 	 * @author SebastianN
 	 */
-	public Profile getProfileByName(String name) {
+	public Profile_V2 getProfileByName(String name) {
 		if (!profiles.isEmpty()) {
 			for (int i = 0; i < profiles.size(); i++) {
 				if (profiles.get(i).getName().equals(name))
@@ -204,7 +165,7 @@ public class ProfileManager {
 	 * 
 	 * @param id - int. ID of the profile you want to delete.
 	 */
-	public void deleteProfile(Profile profile) {
+	public void deleteProfile(Profile_V2 profile) {
 		if (profiles.size() <= 1) {
 			logger.debug("Only one or zero profiles left. Can't delete.");
 			return;
@@ -223,7 +184,7 @@ public class ProfileManager {
 	
 	private boolean existDependency(String f) {
 		int counter = 0;
-		for (Profile profile : profiles) {
+		for (Profile_V2 profile : profiles) {
 			for (String file : profile.getPaths().values()) {
 				if (file.equals(f)) {
 					counter++;
@@ -260,7 +221,7 @@ public class ProfileManager {
 		}
 		
 		// creating the profile
-		Profile prof = createProfile(profileName);
+		Profile_V2 prof = createProfile(profileName);
 
 		// exporting the files form the zip archive to the pathes given in the profile
 		ImportExportManager.importProfiles(zipFile, prof);
@@ -306,7 +267,7 @@ public class ProfileManager {
 	 * @param newActive - Handle of the to-be activated profile
 	 * @author SebastianN, NicolaiO
 	 */
-	public void changeProfile(Profile newActive) {
+	public void changeProfile(Profile_V2 newActive) {
 		if (!changeProfileBlocked) {
 			changeProfileBlocked = true;
 			
@@ -326,6 +287,7 @@ public class ProfileManager {
 			activeProfile = newActive;
 			activeProfile.load();
 			activeProfile.loadDDLs(profiles);
+			Config.getConf().setProperty("ActiveProfile", activeProfile.getName());
 			
 			// update GUI
 			loadLayoutToGUI(activeProfile.getKbdLayout());
@@ -339,7 +301,7 @@ public class ProfileManager {
 	}
 	
 	
-	// ---------------------------layout
+	// ---------------------------layout-----------------
 	/**
 	 * Load the given KeyboardLayout into the Mainpanel and remove all other Components.
 	 * This is neccessary, when you change the profile and thus the Layout!
@@ -371,8 +333,18 @@ public class ProfileManager {
 	private void loadProfiles() {
 		int counter = 0;
 		if (profiles == null) {
-			profiles = new ArrayList<Profile>();
+			profiles = new ArrayList<Profile_V2>();
 		}
+		//define filter for all .chars files in a given dir
+		FilenameFilter isChar = new FilenameFilter() {
+				    public boolean accept(File dir, String name) {
+						if (name.lastIndexOf(".") > 0)
+							return name.substring(name.lastIndexOf("."), name.length()).equals(".chars");
+						else
+							return false;
+				    }
+				};
+		
 		// temp file containing all files
 		LinkedList<File> profileFiles = new LinkedList<File>();
 		
@@ -380,28 +352,46 @@ public class ProfileManager {
 		profileFiles.addAll(getProfileFiles(new File(datapath + "/profiles")));
 
 		// getting all profile files from the PROFILE_PATH directory
-		String[] profilePathes = conf.getProperty("PROFILE_PATH").split(":");
+		String[] profilePathes = Config.getConf().getProperty("PROFILE_PATH").split(":");
 		for (int i = 0; i < profilePathes.length; i++) {
 			File file = new File(profilePathes[i]);
 			profileFiles.addAll(getProfileFiles(file));
 		}
 
-		//deserializing the profiles
+		// create the profiles on basis of the .profile file
 		for (File profileFile : profileFiles) {
 			Properties prop = new Properties();
-			Profile prof;
+			Profile_V2 prof;
 			try {
 				FileInputStream fis = new FileInputStream(profileFile);
 				prop.load(fis);
-				prof = new Profile(prop);
+				prof = new Profile_V2(prop);
 				profiles.add(prof);
 			} catch (IOException err) {
 				// prof = new Profile("toDelete, take the new profile format", datapath);
 				logger.warn("Could not read the profile file");
 			} catch (ExceptionInInitializerError e) {
-				// TODO DirkK or Anybody else: handle old profiles
+				try {
+					prop = new Properties();
+					Profile p = Serializer.deserialize(profileFile.toString());
+					prop.setProperty("name", p.getName());
+					prop.setProperty("profile", p.getPaths().get("profile"));
+					prop.setProperty("tree", p.getPaths().get("tree"));
+					prop.setProperty("layout", p.getPaths().get("layout"));
+					prop.setProperty("chars", Config.getConf().getProperty("defaultAllowedChars"));
+					prop.setProperty("autoCompleting", String.valueOf(p.isAutoCompleting()));
+					prop.setProperty("treeExpanding", String.valueOf(p.isTreeExpanding()));
+					prop.setProperty("autoProfileChange", String.valueOf(p.isAutoProfileChange()));
+					prof = new Profile_V2(prop);
+					prof.save();
+					profiles.add(prof);
+					File oldCharFile = new File(p.getPaths().get("chars"));
+					if (oldCharFile.exists())
+						oldCharFile.delete();
+				} catch (IOException err) {
+					logger.error("Found profile is neither a new profile config file, nor a serialized profile");
+				}
 			}
-
 		}
 		logger.info("Deserialized " + counter + " profiles.");
 	}
@@ -450,13 +440,19 @@ public class ProfileManager {
 	 * @author FelixP
 	 */
 	public boolean existProfile(String profile) {
-		Profile p = getProfileByName(profile);
+		Profile_V2 p = getProfileByName(profile);
 		if (p == null)
 			return false;
 		return true;
 	}
 	
 	
+	// ---------------config-------------
+	public void saveConfig() {
+		Config.saveConfig(datapath);
+	}
+
+	
 	// --------------------------------------------------------------------------
 	// --- getter/setter --------------------------------------------------------
 	// --------------------------------------------------------------------------
@@ -468,7 +464,7 @@ public class ProfileManager {
 	 * @return list of all profiles
 	 * @author SebastianN
 	 */
-	public ArrayList<Profile> getProfiles() {
+	public ArrayList<Profile_V2> getProfiles() {
 		return profiles;
 	}
 	
@@ -479,7 +475,7 @@ public class ProfileManager {
 	 * @return active profile
 	 * @author SebastianN
 	 */
-	public Profile getActive() {
+	public Profile_V2 getActive() {
 		return activeProfile;
 	}
 	
--- t10-keyboard-1.0.orig/src/edu/dhbw/t10/manager/output/OutputManager.java
+++ t10-keyboard-1.0/src/edu/dhbw/t10/manager/output/OutputManager.java
@@ -14,11 +14,12 @@ import java.util.ArrayList;
 import org.apache.log4j.Logger;
 
 import edu.dhbw.t10.manager.Controller;
+import edu.dhbw.t10.type.Config;
 import edu.dhbw.t10.type.keyboard.key.Button;
 import edu.dhbw.t10.type.keyboard.key.Key;
 import edu.dhbw.t10.type.keyboard.key.ModeKey;
 import edu.dhbw.t10.type.keyboard.key.MuteButton;
-import edu.dhbw.t10.type.profile.Profile;
+import edu.dhbw.t10.type.profile.Profile_V2;
 
 
 /**
@@ -37,6 +38,10 @@ public class OutputManager {
 	Output								out;
 	private String						typedWord;
 	private String						suggest;
+	// if unMark is true the method unMark() is used for unmarking suggested chars, otherwise all suggests are deleted a
+	// newly printed;
+	// also if this value is true marked strings could be overwritten without deleting them first...
+	private boolean					unMark;
 	
 	
 	// --------------------------------------------------------------------------
@@ -58,6 +63,8 @@ public class OutputManager {
 			System.exit(-1);
 		}
 		clearWord();
+		unMark = Config.getConf().getProperty("unMark", "false").equals("true");
+		Config.getConf().setProperty("unMark", String.valueOf(unMark));
 		logger.debug("initialized");
 	}
 	
@@ -123,9 +130,8 @@ public class OutputManager {
 	
 	/**
 	 * Unmark all things via pressing the RIGHT Key.
+	 * Is used when unMark property is set to true.
 	 * 
-	 * @deprecated not working with all application. The unmark of marked chars works differently in different
-	 *             applications.
 	 * @author DanielAl
 	 */
 	public void unMark() {
@@ -136,6 +142,7 @@ public class OutputManager {
 	
 	/**
 	 * Delete all marked things via pressing the DELETE Key
+	 * Is used when unMark property is set to false.
 	 * 
 	 * @author DanielAl
 	 */
@@ -214,9 +221,12 @@ public class OutputManager {
 	 * @author DanielAl
 	 */
 	public void keyIsAccept(Key key, String typedWord, String suggest) {
-		if (suggest.length() > typedWord.length())
-			// outputMan.unMark();
-			printSuggest(suggest, typedWord, 1);
+		if (suggest.length() > typedWord.length()) {
+			if (unMark)
+				unMark();
+			else
+				printSuggest(suggest, typedWord, 1);
+		}
 		printKey(key);
 	}
 	
@@ -245,7 +255,7 @@ public class OutputManager {
 			// If oldSuggest not equal to oldTypedWord, it must be longer and so it is marked. Then this mark has to be
 			// deleted first.
 			if (!oldTypedWord.equals(oldSuggest))
-				delMark(oldSuggest.length() - oldTypedWord.length());
+					delMark(oldSuggest.length() - oldTypedWord.length());
 			deleteChar(1);
 			printSuggest(suggest, typedWord);
 		} else {
@@ -263,7 +273,7 @@ public class OutputManager {
 	 * @author DanielAl
 	 */
 	public void keyIsControlOrUnicode(Key key) {
-		if (typedWord.length() < suggest.length()) {
+		if (typedWord.length() < suggest.length() && !unMark) {
 			delMark(suggest.length() - typedWord.length());
 		}
 		printKey(key);
@@ -284,7 +294,7 @@ public class OutputManager {
 	 * @param muteB
 	 * @author DanielAl
 	 */
-	public void muteButtonPressed(MuteButton muteB, Profile activeProfile) {
+	public void muteButtonPressed(MuteButton muteB, Profile_V2 activeProfile) {
 		muteB.push();
 		int type = muteB.getType();
 		switch (type) {
@@ -314,7 +324,7 @@ public class OutputManager {
 	 * @param button
 	 * @author DanielAl
 	 */
-	public void buttonPressed(Button button, Profile activeProfile) {
+	public void buttonPressed(Button button, Profile_V2 activeProfile) {
 		Key key = (Key) button.getPressedKey();
 		
 		// currently we do not support some buttons for linux...
@@ -393,7 +403,7 @@ public class OutputManager {
 	 * @param word
 	 * @author DirkK
 	 */
-	private void acceptWord(String word, Profile activeProfile) {
+	private void acceptWord(String word, Profile_V2 activeProfile) {
 		boolean success = activeProfile.acceptWord(word);
 		if (success) {
 			Controller.getInstance().showStatusMessage("Word inserted: " + word);
@@ -409,7 +419,7 @@ public class OutputManager {
 	 * @param key
 	 * @author NicolaiO
 	 */
-	private void keyIsCapsLock(Profile activeProfile) {
+	private void keyIsCapsLock(Profile_V2 activeProfile) {
 		logger.trace("CapsLock");
 		for (ModeKey mk : activeProfile.getKbdLayout().getModeKeys()) {
 			if (mk.getKeycode().equals("\\SHIFT\\")) {
--- /dev/null
+++ t10-keyboard-1.0/src/edu/dhbw/t10/type/Config.java
@@ -0,0 +1,104 @@
+/* 
+ * *********************************************************
+ * Copyright (c) 2011 - 2011, DHBW Mannheim
+ * Project: T10 On-Screen Keyboard
+ * Date: Dec 5, 2011
+ * Author(s): dirk
+ *
+ * *********************************************************
+ */
+package edu.dhbw.t10.type;
+
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.Properties;
+
+import org.apache.log4j.Logger;
+
+
+/**
+ * contains the conf object, containg all properties which have to be saved
+ * ActiveProfile = active profile
+ * PROFILE_PATH = pathes, where to search for profiles, divided by :
+ * defaultAllowedChars = "A-Za-z\u00E4\u00F6\u00FC\u00C4\u00D6\u00DC", something like this
+ * unMark = if unMark is true the method unMark() is used for unmarking suggested chars, otherwise all suggests are
+ * deleted and newly printed;
+ * also if this value is true marked strings could be overwritten without deleting them first...
+ * 
+ * @author dirk
+ */
+public class Config {
+	// --------------------------------------------------------------------------
+	// --- variables and constants ----------------------------------------------
+	// --------------------------------------------------------------------------
+	private static final Logger	logger		= Logger.getLogger(Config.class);
+	private static Properties		conf;
+	private static String			configFile	= "t10keyboard.conf";
+	
+	
+	// --------------------------------------------------------------------------
+	// --- constructors ---------------------------------------------------------
+	// --------------------------------------------------------------------------
+	
+	
+	// --------------------------------------------------------------------------
+	// --- methods --------------------------------------------------------------
+	// --------------------------------------------------------------------------
+	/**
+	 * loads the config file, fills the conf property attribute
+	 * @author dirk
+	 */
+	public static void loadConfig(String datapath) {
+		conf = new Properties();
+		FileInputStream fis;
+		try {
+			// reading the config file
+			fis = new FileInputStream(datapath + "/" + configFile);
+			conf.load(fis);
+			logger.info("Config file read");
+		} catch (IOException err) {
+			logger.warn("Could not read the config file");
+			// config file not found, set the config values to default
+		}
+		if (!conf.containsKey("ActiveProfile")) {
+			logger.debug("ActiveProfile was not in the config file");
+			conf.setProperty("ActiveProfile", "default");
+		}
+		if (!conf.containsKey("PROFILE_PATH"))
+			conf.setProperty("PROFILE_PATH", "");
+		if (!conf.contains("defaultAllowedChars"))
+			conf.setProperty("defaultAllowedChars","A-Za-z\u00E4\u00F6\u00FC\u00C4\u00D6\u00DC");
+	}
+	
+	
+	/**
+	 * saves the config, should be called at program exit
+	 * @param datapath
+	 * @author dirk
+	 */
+	public static void saveConfig(String datapath) {
+		try {
+			FileOutputStream fos = new FileOutputStream(datapath + "/" + configFile);
+			conf.store(fos, "Stored by closing the program");
+			logger.debug("config file saved to" + datapath + "/" + configFile);
+		} catch (IOException err) {
+			logger.error("Could not store the properties at " + datapath + " / " + configFile);
+			err.printStackTrace();
+		}
+	}
+	
+	
+	// --------------------------------------------------------------------------
+	// --- getter/setter --------------------------------------------------------
+	// --------------------------------------------------------------------------
+	public static Properties getConf() {
+		return conf;
+	}
+	
+	
+	public static void setConf(Properties conf) {
+		Config.conf = conf;
+	}
+
+}
--- t10-keyboard-1.0.orig/src/edu/dhbw/t10/type/profile/Profile.java
+++ t10-keyboard-1.0/src/edu/dhbw/t10/type/profile/Profile.java
@@ -9,28 +9,11 @@
  */
 package edu.dhbw.t10.type.profile;
 
-import java.awt.event.ActionListener;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
 import java.io.Serializable;
-import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Properties;
 
 import org.apache.log4j.Logger;
 
-import edu.dhbw.t10.helper.StringHelper;
-import edu.dhbw.t10.manager.keyboard.KeyboardLayoutLoader;
-import edu.dhbw.t10.manager.keyboard.KeyboardLayoutSaver;
-import edu.dhbw.t10.manager.keyboard.KeymapLoader;
-import edu.dhbw.t10.manager.profile.ImportExportManager;
-import edu.dhbw.t10.type.keyboard.DropDownList;
-import edu.dhbw.t10.type.keyboard.KeyboardLayout;
-import edu.dhbw.t10.type.keyboard.key.MuteButton;
-import edu.dhbw.t10.type.tree.PriorityTree;
-
 
 /**
  * 
@@ -42,27 +25,18 @@ import edu.dhbw.t10.type.tree.PriorityTr
  */
 public class Profile implements Serializable {
 	/**  */
-	private static final long			serialVersionUID	= 5085464540715301878L;
+	private static final long			serialVersionUID	= 5085464540715301877L;
 	// --------------------------------------------------------------------------
 	// --- variables and constants ----------------------------------------------
 	// --------------------------------------------------------------------------
-	/**
-	 * name = profilename
-	 * profile = path to profile config file
-	 * layout = path to layout
-	 * chars = path to the chars file
-	 * tree = path to the tree file
-	 * autoCompleting = true/false
-	 * treeExpanding = true/false
-	 * autoProfileChange = true/false
-	 */
-
-	private Properties					properties			= new Properties();
-	private transient InputStream		defaultLayoutXML;
-	private transient InputStream		defaultKeymapXML;
-	private transient PriorityTree	tree;
-	private transient KeyboardLayout	kbdLayout;
+	private String							name;
+	private HashMap<String, String>	paths;
 	
+	private boolean						autoProfileChange	= true;
+	private boolean						autoCompleting		= true;
+	private boolean						treeExpanding		= true;
+	
+	@SuppressWarnings("unused")
 	private static final Logger		logger				= Logger.getLogger(Profile.class);
 	
 	
@@ -78,363 +52,59 @@ public class Profile implements Serializ
 	 * @param pName - Name of the new profile
 	 * @author SebastianN
 	 */
-	public Profile(String pName, String datapath) {
-		properties.setProperty("name", pName);
-		properties.setProperty("autoCompleting", "true");
-		properties.setProperty("treeExpanding", "true");
-		properties.setProperty("autoProfileChange", "true");
-
-		String name = properties.getProperty("name");
-		File file = new File(datapath + "/profiles");
-		if (!file.isDirectory()) {
-			file.mkdir();
-		}
-		File profileDir = new File(datapath + "/profiles/" + name);
-		if (!profileDir.isDirectory()) {
-			profileDir.mkdir();
-		}
-		properties.setProperty("layout", datapath + "/profiles/" + name + "/" + name + ".layout");
-		properties.setProperty("profile", datapath + "/profiles/" + name + "/" + name + ".profile");
-		properties.setProperty("tree", datapath + "/profiles/" + name + "/" + name + ".tree");
-		properties.setProperty("chars", datapath + "/profiles/" + name + "/" + name + ".chars");
+	public Profile(String pName, String paths) {
 		
-		logger.debug("Profile " + name + " created");
-		load();
-		save();
-	}
-	
-	
-	public Profile(Properties prop) {
-		properties = prop;
-		if (!properties.containsKey("name")) {
-			logger.error("Tried to load profile with invalid properties");
-			throw new ExceptionInInitializerError();
-		}
-		load();
-	}
-
-
-
-	// --------------------------------------------------------------------------
-	// --- methods --------------------------------------------------------------
-	// --------------------------------------------------------------------------
-	
-	public String toString() {
-		return getName();
-	}
-
-
-	/**
-	 * Load layout and tree from file
-	 * 
-	 * @author NicolaiO
-	 */
-	public void load() {
-		loadDefaultPathes();
-		loadLayout();
-		loadTree();
-	}
-	
-	
-	/**
-	 * Save profile (layout and tree)
-	 * 
-	 * @author NicolaiO
-	 */
-	public void save() {
-		saveLayout();
-		saveTree();
-		saveProfile();
 	}
 	
 	
-	private void saveProfile() {
-		FileOutputStream fis;
-		try {
-			fis = new FileOutputStream(properties.getProperty("profile"));
-			properties.store(fis, "stored by saving the profile");
-		} catch (IOException err) {
-			logger.info("Could not save the profile");
-		}
-	}
-	
-	
-	/**
-	 * Save layout to file
-	 * 
-	 * @author NicolaiO
-	 */
-	private void saveLayout() {
-		if (kbdLayout != null) {
-			KeyboardLayoutSaver.save(kbdLayout, properties.getProperty("layout"));
-		}
-	}
-	
-	
-	private void loadDefaultPathes() {
-		defaultLayoutXML = getClass().getResourceAsStream("/res/default/layout_default.xml");
-		defaultKeymapXML = getClass().getResourceAsStream("/res/default/keymap_default.xml");
-		if (defaultLayoutXML == null || defaultKeymapXML == null) {
-			logger.error("Could not load default layout file. Program will not run well...");
-		}
-	}
-
-
-	/**
-	 * load layout from layout file
-	 * 
-	 * @author NicolaiO
-	 */
-	private void loadLayout() {
-		File file = new File(properties.getProperty("layout"));
-		if (file.exists()) {
-			kbdLayout = KeyboardLayoutLoader.load(file, KeymapLoader.load(defaultKeymapXML));
-		} else {
-			logger.info("Default Layout loaded");
-			kbdLayout = KeyboardLayoutLoader.load(defaultLayoutXML, KeymapLoader.load(defaultKeymapXML));
-		}
-		for (MuteButton mb : kbdLayout.getMuteButtons()) {
-			switch (mb.getType()) {
-				case MuteButton.AUTO_COMPLETING:
-					mb.setActivated(properties.getProperty("autoCompleting").equals("true"));
-					break;
-				case MuteButton.AUTO_PROFILE_CHANGE:
-					mb.setActivated(properties.getProperty("autoProfileChange").equals("true"));
-					break;
-				case MuteButton.TREE_EXPANDING:
-					mb.setActivated(properties.getProperty("treeExpanding").equals("true"));
-					break;
-				default:
-					break;
-			}
-		}
-	}
-	
-	
-	/**
-	 * Loads the (serialized) PriorityTree.
-	 * 
-	 * @author DirkK
-	 */
-	private void loadTree() {
-		tree = new PriorityTree(properties.getProperty("chars"));
-		try {
-			tree.importFromHashMap(ImportExportManager.importFromFile(properties.getProperty("tree"), true));
-		} catch (IOException err) {
-			logger.warn("Could not fetch the dictionary for the proifle " + properties.getProperty("name") + ", File: "
-					+ properties.getProperty("tree"));
-		}
-		logger.debug("Tree successfully loaded");
-	}
-	
-	
-	/**
-	 * Saves the PriorityTree as serialized object
-	 * 
-	 * @author DirkK
-	 */
-	private void saveTree() {
-		if (tree != null) {
-			logger.debug("save tree to " + properties.getProperty("tree"));
-			try {
-				ImportExportManager.exportToFile(tree.exportToHashMap(), properties.getProperty("tree"));
-			} catch (IOException err) {
-				logger.error("Not able to save the tree for proifle " + properties.getProperty("name") + " to "
-						+ properties.getProperty("tree"));
-			}
-			logger.debug("save Chars to " + properties.getProperty("chars"));
-			tree.saveAllowedChars();
-		} else {
-			logger.debug("Tree not saved, because not existend");
-		}
-	}
-	
-	
-	/**
-	 * Controller requests a Word suggestion with an given Startstring.
-	 * 
-	 * @param givenChars
-	 * @return wordsuggest
-	 * @author DirkK
-	 */
-	public String getWordSuggest(String givenChars) {
-		if (isAutoCompleting()) {
-			if (getTree() == null) {
-				logger.error("PriorityTree of activeProfile==NULL at getWordSuggest");
-				return "";
-			}
-			return getTree().getSuggest(givenChars);
-		} else {
-			return givenChars;
-		}
-	}
-	
-	
-	/**
-	 * Gives a word which have to be inserted or updated in the data.
-	 * 
-	 * @param word A complete word to be inserted into tree
-	 * @author SebastianN
-	 */
-	public boolean acceptWord(String word) {
-		word = StringHelper.removePunctuation(word);
-		if (isTreeExpanding())
-			return getTree().insert(word);
-		return false;
-	}
-	
-	
-	/**
-	 * Load the lists of all ddls. (currently only one exists)
-	 * Existing items will be removed!
-	 * 
-	 * @author NicolaiO
-	 */
-	public void loadDDLs(ArrayList<Profile> profiles) {
-		ArrayList<DropDownList> DDLs = getKbdLayout().getDdls();
-		for (DropDownList ddl : DDLs) {
-			switch (ddl.getType()) {
-				case DropDownList.PROFILE:
-					// save all action listeners
-					ActionListener[] als = ddl.getActionListeners();
-					// delete all action listeners, so that they can't be called until we are done
-					// e.g. addItem will trigger an ActionEvent!
-					for (int i = 0; i < als.length; i++) {
-						ddl.removeActionListener(als[i]);
-					}
-					
-					// remove all existing items (normally, there shouldn't be any...
-					ddl.removeAllItems();
-					
-					// add all profiles
-					for (Profile p : profiles) {
-						ddl.addItem(p.getName());
-					}
-					
-					// set active profile selected
-					ddl.setSelectedItem(getName());
-					
-					logger.debug("loaded " + ddl.getItemCount() + " items in profile-ddl");
-					logger.debug("Selected item is: " + ddl.getSelectedItem() + " should be: " + this);
-					
-					// now, where we are done, add all listeners back
-					for (int i = 0; i < als.length; i++) {
-						ddl.addActionListener(als[i]);
-					}
-					
-					// do a revalidate to reload the ddl
-					ddl.revalidate();
-					ddl.repaint();
-					
-					break;
-				default:
-					logger.warn("UNKOWN DDL found!");
-			}
-		}
-	}
-
-
-	// --------------------------------------------------------------------------
-	// --- getter/setter --------------------------------------------------------
-	// --------------------------------------------------------------------------
-	
-	
-	/**
-	 * Gets a profile's name
-	 * 
-	 * @return name
-	 * @author SebastianN
-	 */
 	public String getName() {
-		return properties.getProperty("name");
-	}
-	
-	
-	/**
-	 * Sets a profile's name
-	 * 
-	 * @param newName - String
-	 * @author SebastianN
-	 */
-	public void setName(String newName) {
-		properties.setProperty("name", newName);
+		return name;
 	}
 	
 	
-	/**
-	 * @return
-	 * @author dirk
-	 */
-	public PriorityTree getTree() {
-		return tree;
+	public void setName(String name) {
+		this.name = name;
 	}
 	
 	
-	/**
-	 * @author dirk
-	 */
-	public void setTree(PriorityTree tree) {
-		this.tree = tree;
-	}
-	
-	
-	public KeyboardLayout getKbdLayout() {
-		return kbdLayout;
+	public HashMap<String, String> getPaths() {
+		return paths;
 	}
 	
 	
-	public void setKbdLayout(KeyboardLayout kbdLayout) {
-		this.kbdLayout = kbdLayout;
+	public void setPaths(HashMap<String, String> paths) {
+		this.paths = paths;
 	}
 	
 	
 	public boolean isAutoProfileChange() {
-		return properties.getProperty("autoProfileChange").equals("true");
+		return autoProfileChange;
 	}
 	
 	
 	public void setAutoProfileChange(boolean autoProfileChange) {
-		properties.setProperty("autoProfileChange", String.valueOf(autoProfileChange));
+		this.autoProfileChange = autoProfileChange;
 	}
 	
 	
 	public boolean isAutoCompleting() {
-		return properties.getProperty("autoCompleting").equals("true");
+		return autoCompleting;
 	}
 	
 	
 	public void setAutoCompleting(boolean autoCompleting) {
-		properties.setProperty("autoCompleting", String.valueOf(autoCompleting));
+		this.autoCompleting = autoCompleting;
 	}
 	
 	
 	public boolean isTreeExpanding() {
-		return properties.getProperty("treeExpanding").equals("true");
+		return treeExpanding;
 	}
 	
 	
 	public void setTreeExpanding(boolean treeExpanding) {
-		properties.setProperty("treeExpanding", String.valueOf(treeExpanding));
-	}
-	
-	
-	public Properties getProperties() {
-		return properties;
-	}
-	
-	
-	public void setProperties(Properties properties) {
-		this.properties = properties;
-	}
-	
-	
-	public HashMap<String, String> getPaths() {
-		HashMap<String, String> hash = new HashMap<String, String>();
-		hash.put("profile", properties.getProperty("profile"));
-		hash.put("layout", properties.getProperty("layout"));
-		hash.put("tree", properties.getProperty("tree"));
-		hash.put("chars", properties.getProperty("chars"));
-		return hash;
+		this.treeExpanding = treeExpanding;
 	}
 
-}
+
+}
\ No newline at end of file
--- /dev/null
+++ t10-keyboard-1.0/src/edu/dhbw/t10/type/profile/Profile_V2.java
@@ -0,0 +1,449 @@
+/*
+ * *********************************************************
+ * Copyright (c) 2011 - 2011, DHBW Mannheim
+ * Project: T10 On-Screen Keyboard
+ * Date: Oct 15, 2011
+ * Author(s): NicolaiO
+ * 
+ * *********************************************************
+ */
+package edu.dhbw.t10.type.profile;
+
+import java.awt.event.ActionListener;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Properties;
+
+import org.apache.log4j.Logger;
+
+import edu.dhbw.t10.helper.StringHelper;
+import edu.dhbw.t10.manager.keyboard.KeyboardLayoutLoader;
+import edu.dhbw.t10.manager.keyboard.KeyboardLayoutSaver;
+import edu.dhbw.t10.manager.keyboard.KeymapLoader;
+import edu.dhbw.t10.manager.profile.ImportExportManager;
+import edu.dhbw.t10.type.Config;
+import edu.dhbw.t10.type.keyboard.DropDownList;
+import edu.dhbw.t10.type.keyboard.KeyboardLayout;
+import edu.dhbw.t10.type.keyboard.key.MuteButton;
+import edu.dhbw.t10.type.tree.PriorityTree;
+
+
+/**
+ * 
+ * Profile-Handle. It includes the name, the paths to its PriorityTree-/Profile-file,
+ * as well as the PriorityTree itself.
+ * 
+ * @author SebastianN
+ * 
+ */
+public class Profile_V2 implements Serializable {
+	/**  */
+	private static final long			serialVersionUID	= 5085464540715301878L;
+	// --------------------------------------------------------------------------
+	// --- variables and constants ----------------------------------------------
+	// --------------------------------------------------------------------------
+	/**
+	 * name = profilename
+	 * profile = path to profile config file
+	 * layout = path to layout
+	 * chars = String containing the allowed chars
+	 * tree = path to the tree file
+	 * autoCompleting = true/false
+	 * treeExpanding = true/false
+	 * autoProfileChange = true/false
+	 */
+
+	private Properties					properties			= new Properties();
+	private transient InputStream		defaultLayoutXML;
+	private transient InputStream		defaultKeymapXML;
+	private transient PriorityTree	tree;
+	private transient KeyboardLayout	kbdLayout;
+	
+	private static final Logger		logger				= Logger.getLogger(Profile_V2.class);
+	
+	
+	// --------------------------------------------------------------------------
+	// --- constructors ---------------------------------------------------------
+	// --------------------------------------------------------------------------
+	
+	
+	/**
+	 * 
+	 * Constructor of Profile.
+	 * 
+	 * @param pName - Name of the new profile
+	 * @author SebastianN
+	 */
+	public Profile_V2(String pName, String datapath) {
+		properties.setProperty("name", pName);
+		properties.setProperty("autoCompleting", "true");
+		properties.setProperty("treeExpanding", "true");
+		properties.setProperty("autoProfileChange", "true");
+		properties.setProperty("chars", Config.getConf().getProperty("defaultAllowedChars"));
+
+		String name = properties.getProperty("name");
+		File file = new File(datapath + "/profiles");
+		if (!file.isDirectory()) {
+			file.mkdir();
+		}
+		File profileDir = new File(datapath + "/profiles/" + name);
+		if (!profileDir.isDirectory()) {
+			profileDir.mkdir();
+		}
+		properties.setProperty("layout", datapath + "/profiles/" + name + "/" + name + ".layout");
+		properties.setProperty("profile", datapath + "/profiles/" + name + "/" + name + ".profile");
+		properties.setProperty("tree", datapath + "/profiles/" + name + "/" + name + ".tree");
+		
+		logger.debug("Profile " + name + " created");
+		load();
+		save();
+	}
+	
+	
+	public Profile_V2(Properties prop) {
+		properties = prop;
+		if (!properties.containsKey("name")) {
+			logger.error("Tried to load profile with invalid properties");
+			throw new ExceptionInInitializerError();
+		}
+		load();
+	}
+
+
+
+	// --------------------------------------------------------------------------
+	// --- methods --------------------------------------------------------------
+	// --------------------------------------------------------------------------
+	
+	public String toString() {
+		return getName();
+	}
+
+
+	/**
+	 * Load layout and tree from file
+	 * 
+	 * @author NicolaiO
+	 */
+	public void load() {
+		loadDefaultPathes();
+		loadLayout();
+		loadTree();
+	}
+	
+	
+	/**
+	 * Save profile (layout and tree)
+	 * 
+	 * @author NicolaiO
+	 */
+	public void save() {
+		saveLayout();
+		saveTree();
+		saveProfile();
+	}
+	
+	
+	private void saveProfile() {
+		FileOutputStream fis;
+		try {
+			fis = new FileOutputStream(properties.getProperty("profile"));
+			properties.store(fis, "stored by saving the profile");
+		} catch (IOException err) {
+			logger.info("Could not save the profile");
+		}
+	}
+	
+	
+	/**
+	 * Save layout to file
+	 * 
+	 * @author NicolaiO
+	 */
+	private void saveLayout() {
+		if (kbdLayout != null) {
+			KeyboardLayoutSaver.save(kbdLayout, properties.getProperty("layout"));
+		}
+	}
+	
+	
+	private void loadDefaultPathes() {
+		defaultLayoutXML = getClass().getResourceAsStream("/res/default/layout_default.xml");
+		defaultKeymapXML = getClass().getResourceAsStream("/res/default/keymap_default.xml");
+		if (defaultLayoutXML == null || defaultKeymapXML == null) {
+			logger.error("Could not load default layout file. Program will not run well...");
+		}
+	}
+
+
+	/**
+	 * load layout from layout file
+	 * 
+	 * @author NicolaiO
+	 */
+	private void loadLayout() {
+		File file = new File(properties.getProperty("layout"));
+		if (file.exists()) {
+			kbdLayout = KeyboardLayoutLoader.load(file, KeymapLoader.load(defaultKeymapXML));
+		} else {
+			logger.info("Default Layout loaded");
+			kbdLayout = KeyboardLayoutLoader.load(defaultLayoutXML, KeymapLoader.load(defaultKeymapXML));
+		}
+		for (MuteButton mb : kbdLayout.getMuteButtons()) {
+			switch (mb.getType()) {
+				case MuteButton.AUTO_COMPLETING:
+					mb.setActivated(properties.getProperty("autoCompleting").equals("true"));
+					break;
+				case MuteButton.AUTO_PROFILE_CHANGE:
+					mb.setActivated(properties.getProperty("autoProfileChange").equals("true"));
+					break;
+				case MuteButton.TREE_EXPANDING:
+					mb.setActivated(properties.getProperty("treeExpanding").equals("true"));
+					break;
+				default:
+					break;
+			}
+		}
+	}
+	
+	
+	/**
+	 * Loads the (serialized) PriorityTree.
+	 * 
+	 * @author DirkK
+	 */
+	private void loadTree() {
+		tree = new PriorityTree();
+		boolean successfullyCharsLoaded = tree.loadChars(properties.getProperty("chars"));
+		if (!successfullyCharsLoaded) {
+			properties.setProperty("chars", Config.getConf().getProperty("defaultAllowedChars"));
+			tree.loadChars(Config.getConf().getProperty("defaultAllowedChars"));
+		}
+		try {
+			tree.importFromHashMap(ImportExportManager.importFromFile(properties.getProperty("tree"), true));
+		} catch (IOException err) {
+			logger.warn("Could not fetch the dictionary for the proifle " + properties.getProperty("name") + ", File: "
+					+ properties.getProperty("tree"));
+		}
+		logger.debug("Tree successfully loaded");
+	}
+	
+	
+	/**
+	 * Saves the PriorityTree as serialized object
+	 * 
+	 * @author DirkK
+	 */
+	private void saveTree() {
+		if (tree != null) {
+			logger.debug("save tree to " + properties.getProperty("tree"));
+			try {
+				ImportExportManager.exportToFile(tree.exportToHashMap(), properties.getProperty("tree"));
+			} catch (IOException err) {
+				logger.error("Not able to save the tree for proifle " + properties.getProperty("name") + " to "
+						+ properties.getProperty("tree"));
+			}
+			logger.debug("save the allowed chars(" + properties.getProperty("chars") + ")");
+		} else {
+			logger.debug("Tree not saved, because not existend");
+		}
+	}
+	
+	
+	/**
+	 * Controller requests a Word suggestion with an given Startstring.
+	 * 
+	 * @param givenChars
+	 * @return wordsuggest
+	 * @author DirkK
+	 */
+	public String getWordSuggest(String givenChars) {
+		if (isAutoCompleting()) {
+			if (getTree() == null) {
+				logger.error("PriorityTree of activeProfile==NULL at getWordSuggest");
+				return "";
+			}
+			return getTree().getSuggest(givenChars);
+		} else {
+			return givenChars;
+		}
+	}
+	
+	
+	/**
+	 * Gives a word which have to be inserted or updated in the data.
+	 * 
+	 * @param word A complete word to be inserted into tree
+	 * @author SebastianN
+	 */
+	public boolean acceptWord(String word) {
+		word = StringHelper.removePunctuation(word);
+		if (isTreeExpanding())
+			return getTree().insert(word);
+		return false;
+	}
+	
+	
+	/**
+	 * Load the lists of all ddls. (currently only one exists)
+	 * Existing items will be removed!
+	 * 
+	 * @author NicolaiO
+	 */
+	public void loadDDLs(ArrayList<Profile_V2> profiles) {
+		ArrayList<DropDownList> DDLs = getKbdLayout().getDdls();
+		for (DropDownList ddl : DDLs) {
+			switch (ddl.getType()) {
+				case DropDownList.PROFILE:
+					// save all action listeners
+					ActionListener[] als = ddl.getActionListeners();
+					// delete all action listeners, so that they can't be called until we are done
+					// e.g. addItem will trigger an ActionEvent!
+					for (int i = 0; i < als.length; i++) {
+						ddl.removeActionListener(als[i]);
+					}
+					
+					// remove all existing items (normally, there shouldn't be any...
+					ddl.removeAllItems();
+					
+					// add all profiles
+					for (Profile_V2 p : profiles) {
+						ddl.addItem(p.getName());
+					}
+					
+					// set active profile selected
+					ddl.setSelectedItem(getName());
+					
+					logger.debug("loaded " + ddl.getItemCount() + " items in profile-ddl");
+					logger.debug("Selected item is: " + ddl.getSelectedItem() + " should be: " + this);
+					
+					// now, where we are done, add all listeners back
+					for (int i = 0; i < als.length; i++) {
+						ddl.addActionListener(als[i]);
+					}
+					
+					// do a revalidate to reload the ddl
+					ddl.revalidate();
+					ddl.repaint();
+					
+					break;
+				default:
+					logger.warn("UNKOWN DDL found!");
+			}
+		}
+	}
+
+
+	// --------------------------------------------------------------------------
+	// --- getter/setter --------------------------------------------------------
+	// --------------------------------------------------------------------------
+	
+	
+	/**
+	 * Gets a profile's name
+	 * 
+	 * @return name
+	 * @author SebastianN
+	 */
+	public String getName() {
+		return properties.getProperty("name");
+	}
+	
+	
+	/**
+	 * Sets a profile's name
+	 * 
+	 * @param newName - String
+	 * @author SebastianN
+	 */
+	public void setName(String newName) {
+		properties.setProperty("name", newName);
+	}
+	
+	
+	/**
+	 * @return
+	 * @author dirk
+	 */
+	public PriorityTree getTree() {
+		return tree;
+	}
+	
+	
+	/**
+	 * @author dirk
+	 */
+	public void setTree(PriorityTree tree) {
+		this.tree = tree;
+	}
+	
+	
+	public KeyboardLayout getKbdLayout() {
+		return kbdLayout;
+	}
+	
+	
+	public void setKbdLayout(KeyboardLayout kbdLayout) {
+		this.kbdLayout = kbdLayout;
+	}
+	
+	
+	public boolean isAutoProfileChange() {
+		return properties.getProperty("autoProfileChange").equals("true");
+	}
+	
+	
+	public void setAutoProfileChange(boolean autoProfileChange) {
+		properties.setProperty("autoProfileChange", String.valueOf(autoProfileChange));
+	}
+	
+	
+	public boolean isAutoCompleting() {
+		return properties.getProperty("autoCompleting").equals("true");
+	}
+	
+	
+	public void setAutoCompleting(boolean autoCompleting) {
+		properties.setProperty("autoCompleting", String.valueOf(autoCompleting));
+	}
+	
+	
+	public boolean isTreeExpanding() {
+		return properties.getProperty("treeExpanding").equals("true");
+	}
+	
+	
+	public void setTreeExpanding(boolean treeExpanding) {
+		properties.setProperty("treeExpanding", String.valueOf(treeExpanding));
+	}
+	
+	
+	public Properties getProperties() {
+		return properties;
+	}
+	
+	
+	public void setProperties(Properties properties) {
+		this.properties = properties;
+	}
+	
+	
+	public HashMap<String, String> getPaths() {
+		HashMap<String, String> hash = new HashMap<String, String>();
+		hash.put("profile", properties.getProperty("profile"));
+		hash.put("layout", properties.getProperty("layout"));
+		hash.put("tree", properties.getProperty("tree"));
+		return hash;
+	}
+	
+	
+	public void setAllowedChars(String allowedChars) {
+		tree.loadChars(allowedChars);
+		properties.setProperty("chars", allowedChars);
+	}
+}
--- t10-keyboard-1.0.orig/src/edu/dhbw/t10/type/tree/PriorityTree.java
+++ t10-keyboard-1.0/src/edu/dhbw/t10/type/tree/PriorityTree.java
@@ -9,7 +9,6 @@
  */
 package edu.dhbw.t10.type.tree;
 
-import java.io.IOException;
 import java.io.Serializable;
 import java.util.HashMap;
 import java.util.LinkedList;
@@ -17,8 +16,6 @@ import java.util.Map.Entry;
 
 import org.apache.log4j.Logger;
 
-import edu.dhbw.t10.manager.profile.ImportExportManager;
-
 
 /**
  * data container for the dictionary, the data it self is stored in the PriorityElements, PriorityTree has functions
@@ -43,7 +40,14 @@ public class PriorityTree implements Ser
 	private HashMap<String, Integer>		words;
 	
 	private static final Logger			logger				= Logger.getLogger(PriorityTree.class);
-	private transient String				pathToAllowedChars;
+
+	/*
+	 * String containing the allowed chars
+	 * example:
+	 * stringToAllowedChars="1-5:50-100:240"
+	 * allowedChar={{1,5},{50,100}{240,240}}
+	 */
+	private transient String				stringToAllowedChars;
 	
 	
 	// --------------------------------------------------------------------------
@@ -53,14 +57,16 @@ public class PriorityTree implements Ser
 	/**
 	 * 
 	 * PriorityTree is a tree which contains all words which were typed and their frequency
+	 * call the loadChar function afterwards
 	 * 
 	 * @param chars the path to the allowed according ".chars" file
 	 * @author DirkK
 	 */
-	public PriorityTree(String chars) {
-		pathToAllowedChars = chars;
+	public PriorityTree() {
+		stringToAllowedChars = "0-255";
+		int[] t  = {0,255};
 		allowedChars = new LinkedList<int[]>();
-		loadAllowedChars();
+		allowedChars.add(t);
 		root = new PriorityElement('\u0000', null, null, 0);
 	}
 	
@@ -68,7 +74,51 @@ public class PriorityTree implements Ser
 	// --------------------------------------------------------------------------
 	// --- methods --------------------------------------------------------------
 	// --------------------------------------------------------------------------
+	/**
+	 * takes the stringToAllowedChars, divides it at :, and puts each part into allowedChars
+	 * 
+	 * @author dirk
+	 */
+	public boolean loadChars(String allowedCharsString) {
+		stringToAllowedChars = allowedCharsString;
+		allowedChars = new LinkedList<int[]>();
+		int index = 0;
+		char buffer = '\u0000';
+		boolean flag = false;
+		char[] charAllowed = stringToAllowedChars.toCharArray();
+		while (index < charAllowed.length) {
+			if (buffer == '\u0000') {
+				buffer = charAllowed[index];
+			} else if (flag) {
+				int second = (int) charAllowed[index];
+				pushToAllowedChars(second, (int) buffer);
+			} else if (!flag) {
+				if (charAllowed[index] == '-')
+					flag = true;
+				else {
+					pushToAllowedChars((int) buffer, (int) buffer);
+					buffer = charAllowed[index];
+				}
+			}
+			index++;
+		}
+		if(allowedChars.size()==0) {
+			return false;
+		}
+		return true;
+	}
 	
+	
+	private void pushToAllowedChars(int a, int b) {
+		if (a < b) {
+			int[] t = { a, b };
+			allowedChars.push(t);
+		} else {
+			int[] t = { b, a };
+			allowedChars.push(t);
+		}
+
+	}
 	/**
 	 * inserts a word to the tree
 	 * if the word already exist, frequency is increased by one and suggests are adujsted
@@ -122,7 +172,7 @@ public class PriorityTree implements Ser
 			// logger.debug("Word Inserted");
 			return true;
 		} else {
-			// logger.warn("Word (" + word + ") Ignored - not valid");
+			logger.warn("Word (" + word + ") ignored - not valid (valid: " + stringToAllowedChars + ")");
 			return false;
 		}
 	}
@@ -357,44 +407,6 @@ public class PriorityTree implements Ser
 	}
 	
 	
-	/**
-	 * save the rules which chars are allowed
-	 * not used yet
-	 * @author DirkK
-	 */
-	
-	public void saveAllowedChars() {
-		try {
-			ImportExportManager.saveChars(pathToAllowedChars, allowedChars);
-		} catch (IOException io) {
-			logger.error("IOException in readConfig()");
-			io.printStackTrace();
-		} catch (Exception ex) {
-			logger.error("Exception in readConfig(): " + ex.toString());
-			ex.printStackTrace();
-		}
-	}
-	
-	
-	/**
-	 * reads form a config file which chars are allowed to be added to the tree
-	 * avoids to insert UNICODE into the tree
-	 * Not used yet
-	 * @author DirkK
-	 */
-	private void loadAllowedChars() {
-		try {
-			allowedChars = ImportExportManager.loadChars(pathToAllowedChars);
-		} catch (IOException io) {
-			logger.error("IOException in loadAllowedChars()");
-			io.printStackTrace();
-		} catch (Exception ex) {
-			logger.error("Exception in loadAllowedChars(): " + ex.toString());
-			ex.printStackTrace();
-		}
-	}
-	
-	
 	public HashMap<String, Integer> getWords() {
 		return words;
 	}
@@ -404,6 +416,8 @@ public class PriorityTree implements Ser
 		this.words = words;
 	}
 	
+
+
 	// --------------------------------------------------------------------------
 	// --- getter/setter --------------------------------------------------------
 	// --------------------------------------------------------------------------
--- t10-keyboard-1.0.orig/src/edu/dhbw/t10/helper/StringHelper.java
+++ t10-keyboard-1.0/src/edu/dhbw/t10/helper/StringHelper.java
@@ -123,6 +123,33 @@ public class StringHelper {
 		}
 		return path;
 	}
+	
+	
+	/**
+	 * String has to be of the format: (<number>(-<number>)*:)*
+	 * @param input
+	 * @return
+	 * @author dirk
+	 */
+	public static String transformNumbersToChars(String input) {
+		String output = "";
+		for (String range : input.split(":")) {
+			for (String number : range.split("-")) {
+				try {
+					int nr = Integer.parseInt(number);
+					char c = (char) nr;
+					output += String.valueOf(c) + "-";
+				} catch (NumberFormatException e) {
+					System.out.println("Exception: " + number);
+				}
+			}
+			if (output.length() > 0 && output.charAt(output.length() - 1) == '-')
+				output = output.substring(0, output.length() - 1) + ":";
+		}
+		if (output.length() > 0 && output.charAt(output.length() - 1) == ':')
+			output = output.substring(0, output.length() - 1);
+		return output;
+	}
 	// --------------------------------------------------------------------------
 	// --- getter/setter --------------------------------------------------------
 	// --------------------------------------------------------------------------
