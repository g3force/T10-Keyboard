<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Inserts a standard-call to SwingUtilities.invokeLater with a inline-defined runnable" enabled="true" name="invokelater">SwingUtilities.invokeLater(new Runnable() {&#13;
	@Override&#13;
	public void run()&#13;
	{&#13;
		${cursor}&#13;
	}&#13;
});</template><template autoinsert="true" context="java" deleted="false" description="Inserts a new private 'log4j'-instance" enabled="true" name="log">${:import(org.apache.log4j.Logger)}private final Logger log = Logger.getLogger(getClass());</template><template autoinsert="true" context="java" deleted="false" description="Inserts a list of observers for a standard Sumatra-Observable" enabled="true" name="observable_list">private final ${list:newType(java.util.List)}&lt;${type}&gt; observers = new ${arrayList:newType(java.util.ArrayList)}&lt;${type}&gt;();&#13;
&#13;
&#13;
public void addObserver(${type} observer)&#13;
{&#13;
	synchronized(observers)&#13;
	{&#13;
		observers.add(observer);&#13;
	}&#13;
}&#13;
&#13;
&#13;
public void removeObserver(${type} observer)&#13;
{&#13;
	synchronized(observers)&#13;
	{&#13;
		observers.remove(observer);&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Inserts a list of observers and a notify-method for a standard Sumatra-Observable" enabled="true" name="observable_list+notify">private final ${list:newType(java.util.List)}&lt;${type}&gt; observers = new ${arrayList:newType(java.util.ArrayList)}&lt;${type}&gt;();&#13;
&#13;
&#13;
public void addObserver(${type} observer)&#13;
{&#13;
	synchronized(observers)&#13;
	{&#13;
		observers.add(observer);&#13;
	}&#13;
}&#13;
&#13;
&#13;
public void removeObserver(${type} observer)&#13;
{&#13;
	synchronized(observers)&#13;
	{&#13;
		observers.remove(observer);&#13;
	}&#13;
}&#13;
&#13;
&#13;
private void notify${method}(${eventType} ${event})&#13;
{&#13;
	synchronized(observers)&#13;
	{&#13;
		for (${type} observer : observers)&#13;
		{&#13;
			observer.on${method}(${event});&#13;
		}&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Inserts a notify...(...)-method for a Sumatra-observable" enabled="true" name="observable_notify">private void notify${method}(${eventType} ${event})&#13;
{&#13;
	synchronized(observers)&#13;
	{&#13;
		for (${observerType} observer : observers)&#13;
		{&#13;
			observer.on${method}(${event});&#13;
		}&#13;
	}&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Inserts a standard Singleton-implementation" enabled="true" name="singleton">private static ${enclosing_type} instance = null;&#13;
public static synchronized ${enclosing_type} getInstance()&#13;
{&#13;
	if (instance == null)&#13;
	{&#13;
		instance = new ${enclosing_type}();&#13;
	}&#13;
	return instance;&#13;
}&#13;
&#13;
private ${enclosing_type}()&#13;
{&#13;
	${cursor}&#13;
}</template></templates>